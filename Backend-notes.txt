                          
                          Backend for Bank App

                ------------------------------------------

1.Create a server folder - bankapp-Backend
2.Create a package.json file - npm init
3.install express - npm i express
4.create index.js file
5.using express create server application server

//create a server application using express

//1.import express
const express=require('express');

//2.create a server application using express
const server = express();

//3.setup port for server application
server.listen(5000,()=>{
    console.log('server listening on port 5000');
})


//frontend port and backend port to connect we use cors for that
    CORS- cross origin resource sharing 
//4.import cors
const cors=require('cors');

the use these cors 
//5.use cors
server.use(cors({
    origin:'http://localhost:4200'
}))

//6
server.use(express.json())//return middleware that only parse json
here we use json data format 


                            //create a server application using express

                    //1.import express
                    const express=require('express');
                    //4.import cors
                    const cors=require('cors');

                    //2.create a server application using express
                    const server = express();

                    //5.use cors
                    server.use(cors({
                        origin:'http://localhost:4200'
                    }))

                    //6
                    server.use(express.json())//return middleware that only parse json

                    //3.setup port for server application
                    server.listen(5000,()=>{
                        console.log('server listening on port 5000');
                    })


next step is call for api

//API Call to resolve - localhost:5000
server.get('/',(req,res)=>{
    res.send('welcome to backend')
})
server.post('/',(req,res)=>{
    console.log('server post');
})

                    --------------- for backend to work-------------- 
                    -               we can use node index.js        -
                    -                                               -
                    -                    for faster                 -
                    -                 npm i -g nodemon              -
                    -                    nodemon index.js           -
                    -                                               -
                    --------------------------------------------------
//API CALLS
//Register - localhost:5000/register
//Login - localhost:5000/login
//Balance - localhost:5000/balance
//Fund transfer - localhost:5000/fund transfer
//transaction - localhost:5000/transactions

//API CALLS
//Register - localhost:5000/register
    =>index.js
//Register - localhost:5000/register
server.post('/register',(req,res)=>{
    console.log('Inside register API call');
    console.log(req.body);
    //logic to resolve register request
    res.status(200).json({message:"Reg request Received",})


})

we need to connect mongodb 





for authorization purpose we use jwt(json web token)
    https://www.positronx.io/angular-jwt-user-authentication-tutorial/


    what is jwt?
    ->JWT refers to JSON Web token. It’s a token in string form validated 
    and generated by a web server. This string-based token helps in 
    communicating between the client and the server.

    ->installation - npm i jsonwebtoken
    ->Generate token - sign()
    ->Using jwt token,generate token for user who logined successfully
    ->import jwt token in to logic.js file

            //import jsonweb token
        const jwt = require('jsonwebtoken')

    /logic for login
const login=(acno,password)=>{
    return db.User.findOne({acno,password}).then((response)=>{
        console.log(response);
        
        if(response){

            //token generation
            const token =jwt.sign({
                    loginAcno:acno
            },'superkey2023')

    //if acno and password are present in db
            return{
               
                statusCode:200,
                message:"Login Successful",
                currentUser:response.username,//current user name send to frontend
                balance:response.balance,//balance of current user
              =>  token
            }
        }


        12.Middleware Node js

          ->  Middleware Node.JS is a function that plays a vital role in the 
            request-response lifecycle of Node.JS execution. 
         ->   Using middleware functions, you can run any code and easily 
            change response and request objects.

        what is nodejs 

      ->  By using Node.JS, you can build dynamic page content. 
        Also, you can open, close, read, write, modify, create and 
        delete files on the server.

     ->   Know that all APIs of Node.JS are asynchronous. In other words,
         they are non-blocking APIs. Node.JS is an asynchronous event-driven 
         runtime environment with which you can develop scalable network applications.

     ->   Node.JS uses a single-threaded model, but at the same time, they 
        are highly scalable. What’s more! They don't buffer any data, but they 
        release data in chunks


      =>  What is the Next ( ) Function?
      ->  The next ( ) function plays a vital role in applications' 
        request and response cycle. 
     ->   It is a middleware function that runs the next middleware 
        function once it is invoked. 
    ->    In other words, the Next function is invoked if the current middleware 
        function doesn’t end the request and response cycle. 
     ->   It is essential to note that no middleware function should be hanging 
        in the queue.

        Types of Node.JS Middleware
There are five types of middleware as follows

Types of Node.JS Middleware

        ->Application-level Middleware
            -> application-level middleware focuses on authenticating users. 
                Once the authentication request is received, the authentication 
                middleware invokes authentication code logic.
            -> If the authentication is successful, the rest of the route 
                is progressed with the help of the next function

                //for sample
//Application - level Middleware

// const appMiddleware = (req,res,next)=>{
//     console.log('Application - level Middleware')
//     next();
// }

// server.use(appMiddleware)
                
        ->Router-level Middleware

            This middleware works in the same way application-level 
            middleware works. By using the express. router ( ) function, 
            this middleware supports creating and managing instances. 
            Moreover, you can load router-level middleware with the help 
            of the router.use ( ) function as well as router.METHOD ( ) function.

            
        ->Built-in Middleware
        ->Error-Handling Middleware
        ->Third-party Middleware

//LOGIC for fund Transfer
const fundTransfer=(fromAcno,frompswd,toAcno,amt)=>{

    //convert amt to a integer
    let amount = parseInt(amt)
    //check fromAcno & frompswd in mongodb
    return db.User.findOne({acno:fromAcno,password: frompswd}).then((debit)=>{
        if(debit){
            //check toAcno in mongodb
            return db.User.findOne({acno: toAcno}).then((credit)=>{
                //fund Transfer
                if(credit){
                    if(debit.balance>=amount){
                        debit.balance-=amount
                        debit.transactions.push({
                            type: 'debit',
                            amount,
                            fromAcno,
                            toAcno
                        })
                    }
                    else{
                        return{
                            statusCode:401,
                            message:'Insufficient Funds'
                        }
                    }
                    //save changes into database
                    debit.save()
                }
                else{
                    return{
                        statusCode:401,
                        message:'Invalid Credit Details'
                    }
                }
                credit.balance+=amount
                credit.transactions.push({ 
                    type:'credit',
                    amount,
                    fromAcno,
                    toAcno
                })
                 //save changes into database
                 credit.save()

                 //send response back to client
                 return{
                    statusCode:200,
                    message:'Fund Transfer Successful...'
                 }
            })


        }
        else{
            return{
                statusCode:401,
                message:'Invalid Debit Details'
            }
        }
    })
}
module.exports={
    register,
    login,
    getBalance,
    fundTransfer


}

in index.js

//Fund transfer - localhost:5000/fund transfer
server.post('/fundtransfer',jwtMiddleware, (req, res)=>{
    console.log('Inside fund transfer API Call');
    console.log(req.body);
    logic.fundTransfer(req.currentAcno,req.body.password,req.body.toAcno,req.body.amount).then
    ((response)=>{
        res.status(response.statusCode).json(response)
    })

    })

    then go to front end for fund transfer request

    go to api service.ts